1、explain作用
2、查询优化器的作用


题目：囧囧的MySQL索引一面问答小抄



a、你好面试官，我是应聘员囧囧，我应聘的是数据库开发工程师，我是xxx(...3分钟介绍)

b、你好，我是面试官大肥

b、我看你简历上写了熟悉MySQL索引

a、嗯，我对MySQL索引蛮了解的

b、一面我们就先聊聊索引基础吧！

b、一聊sql优化，一般第一个提起的就是索引，说说你对 MySQL 索引的理解？

a、根据MySQL官方定义，索引是用来帮助MySQL高效获取数据的一种数据结构

a、本质：一种有序的快速查找数据结构

a、可以类比理解为字典的目录，火车站的车次表..

b、为什么索引这么快？（期待从IO角度分析）

a、索引使用的是B+Tree建立的索引结构，查询非常快

b、是我没有表述清楚，你能从非算法层面进行一下分析吗？

a、额，如果不是算法，那就是磁盘IO方面了。

a、
计算机内存加载数据一般都要经历三个动作完成，也就是三个耗时过程

1、寻道（时间）：确定要读的数据在哪个磁道耗费的时间
2、旋转延迟（时间）：确定要读的数据在磁道上的哪个扇区耗费的时间
3、数据传输（时间）：数据加载到内存耗费的时间


a、每一次IO操作耗费时间 = 寻道 + 旋转延迟 + 数据传输

a 实际上加载数据到内存的时间非常短暂，主要的耗时来自寻道和旋转延迟

a 
一般一次IO操作，耗时大概只有几ms

假如是5ms，但是数据库百万级别的数据加载一遍，就需要5000s，对于一个系统来说，简直是毁灭级别的

a 我们需要的就是减少磁盘IO的次数，这也是使用索引的意义所在

a 索引能够保证在亿级别的数据，只需要2~4次磁盘IO

b、InnoDB和MyISAM文件存储有什么不同？

a、不管是InnoDB还是MyISAM 与表相关的元数据信息都存放在.frm文件中，例如表结构的定义信息等

a MyISAM的物理文件结构

	.MYI（MYIndex）文件：MyISAM专属存储表索引的文件
	.MYD（MYData） 文件：MyISAM专属存储表数据的文件

a InnoDB的物理文件结构
	
	.ibd文件或者是.ibdata文件： InnoDB存储数据文件

	独享表空间存储方式使用的是 .ibd文件，每个表一个 .ibd文件

	共享表空间存储方式使用的是 .ibdata文件，所有表共同使用一个.ibdata(也可以配置多个)


b 囧囧同学的基本功可以的！

b 坏笑表情

b 囧囧同学，你说一下为什么MySQL 索引中用B+Tree，不用B-tree 或者其他树，为什么不用 Hash 索引？？？（灵魂三连击）



b 囧囧同学，你说一下为什么MySQL 使用B+Tree作为索引结构，不用B-Tree 或者其他树，为什么不用 Hash 结构？？？（灵魂三连击）
a 选择B+Tree主要的原因是B+Tree查询够快，效率稳定，磁盘IO次数少
a ...（通用回答说完...场面一度尴尬）
b （...2分钟后）没了吗？
b 这样吧，为了你更好分析，我拆开问
b 为什么不使用哈希结构作为索引结构，从你上面说的几个特点来分析一下
a 通常查询多数是范围查询 类似：
	select id, name, age from sys_user where age between 18 and 28;
a
哈希结构，存储引擎会为每一行表记录计算出哈希值，哈希索引存储的就是HASH码

HASH码直接随机生成，并没有规律

这就导致即使是两个很相近的行记录，极大可能也会被分配到不同的桶（磁盘块）中

最坏的情况下每查找一条记录，都要进行一次磁盘IO （可怕）

这样key-val 键值对的形式对于精确查找非常敏感，对全值匹配很友好，所以单条记录查询效率非常高，时间复杂度为 1

但是我们日常业务来说，最常用的还是范围搜索，所以不适合

b 讲的很好呀，为什么统一问你就支支吾吾说不清了
a （囧囧表示：面试最怕的就是问的知识点太笼统，自己无法快速定位到关键问题点）

b 那我们继续！

b 为什么不使用二叉树？

a 

二叉树最多有两个子节点，这种结构导致树的高度会很高，增加IO次数
特殊情况下可能化为链表结构，相当于全表扫描，全量磁盘IO

a 
类似的平衡二叉树，高度也很高

b 那B-Tree 呢？B-Tree可以存储更多的数据，高度更低，为什么不选择？而是B+Tree？

a B-Tree是多路平衡搜索树，可以极大的优化磁盘IO次数，但是B-Tree每个节点中不仅包含数据的key（索引值），还有data（整行记录）
使用B-Tree结构，优点是找到索引就代表找到了数据记录

b 既然如此为什么不使用B-Tree结构？

a 还是老问题，磁盘IO数

我们知道MySQL读取数据是以页为单位（磁盘块），每页（或者说每个磁盘块）的存储空间是有限的

如果data 很大，将会导致每页存储的索引数量很小

数据表存储的数据量很大的时候同样会导致 B-Tree的深度很大，增大查询时的磁盘I/O次数，进而影响查询效率

b 理解的很清晰，请继续

a 
B+Tree是对B-Tree 的一种优化结构，使其更适合实现外存储索引结构

	1、非叶子节点只存储键值信息(索引信息)

	2、所有的数据记录都按照键值大小顺序存放在同一层的叶子节点上

好处：B+Tree的非叶子节点只存储键值信息，那么每一页能存储更多的索引，树的高度被压缩到很低，磁盘IO次数更小

一般情况下2~4次IO，即可查询到想要的记录

而且因为表数据都是顺序存储在B+Tree结构的叶子节点，所以对于范围查找很友好，效率高

b 索引的优势是加快查询效率，减少磁盘IO次数

那么我是否应该给表尽可能建立多的索引列


a 不是

虽然使用索引可以加快查询，但是盲目创建过多索引，大大增加了维护索引的时间成本和空间成本

b 具体指的是那些方面呢？

a 首先说一下索引的好处
	1、减少IO次数，提高-检索效率
	2、降低数据排序成本，可以减少CPU消耗

a 
因为索引是有序的快速查找结构，要维护索引的这个快速查找且有序特性，需要不断的进行调整，而调整就需要时间成本。
创建索引和维护索引要耗费时间，当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度
这种时间成本随着数据量的增加而增加


a 其次，每一个索引都是一棵B+Tree，保存索引和指向实体表的引用，需要占据空间。
如果建立的是聚簇索引，数据和主键都保存在索引文件中，则需要更大的空间成本


b 讲的挺好，那么今天就到这里，下期我们继续聊一下索引的其他方面，比如索引的适用场景，最左前缀，索引的优化等




	








准备问题
		说说你对 MySQL 索引的理解？
		面试官考点之索引是什么？
面试官考点之索引类型
		2、你能从计算机层面开始说一下一个索引数据加载的流程么？
		的在于提高查询效率，可以类比字典、 火车站的车次表、图书的目录等 。
1、文件存储结构
2、不同引擎锁粒度
3、事务
4、缓存
5、表空间 -----> MyISAM 小 InnoDB 大， ---> 疑惑
6、元数据存储文件 .frm
7、物理存储文件  
	MyISAM .MYD存储表数据 .MYI存储表索引  
	InnoDB .ibd 用于独享表空间存储方式，每一张表一个.ibd文件  .ibdata 用于共享表空间存储方式，所有表公用一个 .ibdata文件（或者多个，可以配置）
8、不同引擎，自增主键，MySQL重启后，最大id
9、CHAR,VARCHAR 实际分配空间
11、索引创建，删除，修改语法
12、全文索引  ---> 疑惑
13、索引优势
14、索引劣势
15、从数据结构的角度划分索引类型
16、从物理存储角度划分索引类型
17、从逻辑角度划分索引类型
